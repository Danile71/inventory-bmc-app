// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbbmc

import (
	context "context"
	pbdiscovery "github.com/foliagecp/inventory-bmc-app/sdk/pbdiscovery"
	pbinventory "github.com/foliagecp/inventory-bmc-app/sdk/pbinventory"
	pbled "github.com/foliagecp/inventory-bmc-app/sdk/pbled"
	pbpower "github.com/foliagecp/inventory-bmc-app/sdk/pbpower"
	pbredfish "github.com/foliagecp/inventory-bmc-app/sdk/pbredfish"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BmcServiceClient is the client API for BmcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BmcServiceClient interface {
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Discovery(ctx context.Context, in *pbdiscovery.Request, opts ...grpc.CallOption) (*pbredfish.Device, error)
	Inventory(ctx context.Context, in *pbinventory.Request, opts ...grpc.CallOption) (*pbredfish.Device, error)
	ListDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*pbredfish.Devices, error)
	SwitchLed(ctx context.Context, in *pbled.Request, opts ...grpc.CallOption) (*pbredfish.Device, error)
	SwitchPower(ctx context.Context, in *pbpower.Request, opts ...grpc.CallOption) (*pbredfish.Device, error)
}

type bmcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBmcServiceClient(cc grpc.ClientConnInterface) BmcServiceClient {
	return &bmcServiceClient{cc}
}

func (c *bmcServiceClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/inventory.bmc.app.sdk.pbbmc.BmcService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmcServiceClient) Discovery(ctx context.Context, in *pbdiscovery.Request, opts ...grpc.CallOption) (*pbredfish.Device, error) {
	out := new(pbredfish.Device)
	err := c.cc.Invoke(ctx, "/inventory.bmc.app.sdk.pbbmc.BmcService/Discovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmcServiceClient) Inventory(ctx context.Context, in *pbinventory.Request, opts ...grpc.CallOption) (*pbredfish.Device, error) {
	out := new(pbredfish.Device)
	err := c.cc.Invoke(ctx, "/inventory.bmc.app.sdk.pbbmc.BmcService/Inventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmcServiceClient) ListDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*pbredfish.Devices, error) {
	out := new(pbredfish.Devices)
	err := c.cc.Invoke(ctx, "/inventory.bmc.app.sdk.pbbmc.BmcService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmcServiceClient) SwitchLed(ctx context.Context, in *pbled.Request, opts ...grpc.CallOption) (*pbredfish.Device, error) {
	out := new(pbredfish.Device)
	err := c.cc.Invoke(ctx, "/inventory.bmc.app.sdk.pbbmc.BmcService/SwitchLed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmcServiceClient) SwitchPower(ctx context.Context, in *pbpower.Request, opts ...grpc.CallOption) (*pbredfish.Device, error) {
	out := new(pbredfish.Device)
	err := c.cc.Invoke(ctx, "/inventory.bmc.app.sdk.pbbmc.BmcService/SwitchPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BmcServiceServer is the server API for BmcService service.
// All implementations must embed UnimplementedBmcServiceServer
// for forward compatibility
type BmcServiceServer interface {
	Health(context.Context, *Empty) (*Empty, error)
	Discovery(context.Context, *pbdiscovery.Request) (*pbredfish.Device, error)
	Inventory(context.Context, *pbinventory.Request) (*pbredfish.Device, error)
	ListDevices(context.Context, *Empty) (*pbredfish.Devices, error)
	SwitchLed(context.Context, *pbled.Request) (*pbredfish.Device, error)
	SwitchPower(context.Context, *pbpower.Request) (*pbredfish.Device, error)
	mustEmbedUnimplementedBmcServiceServer()
}

// UnimplementedBmcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBmcServiceServer struct {
}

func (UnimplementedBmcServiceServer) Health(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBmcServiceServer) Discovery(context.Context, *pbdiscovery.Request) (*pbredfish.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discovery not implemented")
}
func (UnimplementedBmcServiceServer) Inventory(context.Context, *pbinventory.Request) (*pbredfish.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inventory not implemented")
}
func (UnimplementedBmcServiceServer) ListDevices(context.Context, *Empty) (*pbredfish.Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedBmcServiceServer) SwitchLed(context.Context, *pbled.Request) (*pbredfish.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchLed not implemented")
}
func (UnimplementedBmcServiceServer) SwitchPower(context.Context, *pbpower.Request) (*pbredfish.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchPower not implemented")
}
func (UnimplementedBmcServiceServer) mustEmbedUnimplementedBmcServiceServer() {}

// UnsafeBmcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BmcServiceServer will
// result in compilation errors.
type UnsafeBmcServiceServer interface {
	mustEmbedUnimplementedBmcServiceServer()
}

func RegisterBmcServiceServer(s grpc.ServiceRegistrar, srv BmcServiceServer) {
	s.RegisterService(&BmcService_ServiceDesc, srv)
}

func _BmcService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmcServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.bmc.app.sdk.pbbmc.BmcService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmcServiceServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BmcService_Discovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdiscovery.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmcServiceServer).Discovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.bmc.app.sdk.pbbmc.BmcService/Discovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmcServiceServer).Discovery(ctx, req.(*pbdiscovery.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BmcService_Inventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbinventory.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmcServiceServer).Inventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.bmc.app.sdk.pbbmc.BmcService/Inventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmcServiceServer).Inventory(ctx, req.(*pbinventory.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BmcService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmcServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.bmc.app.sdk.pbbmc.BmcService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmcServiceServer).ListDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BmcService_SwitchLed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbled.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmcServiceServer).SwitchLed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.bmc.app.sdk.pbbmc.BmcService/SwitchLed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmcServiceServer).SwitchLed(ctx, req.(*pbled.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BmcService_SwitchPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbpower.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmcServiceServer).SwitchPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.bmc.app.sdk.pbbmc.BmcService/SwitchPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmcServiceServer).SwitchPower(ctx, req.(*pbpower.Request))
	}
	return interceptor(ctx, in, info, handler)
}

// BmcService_ServiceDesc is the grpc.ServiceDesc for BmcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BmcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.bmc.app.sdk.pbbmc.BmcService",
	HandlerType: (*BmcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BmcService_Health_Handler,
		},
		{
			MethodName: "Discovery",
			Handler:    _BmcService_Discovery_Handler,
		},
		{
			MethodName: "Inventory",
			Handler:    _BmcService_Inventory_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _BmcService_ListDevices_Handler,
		},
		{
			MethodName: "SwitchLed",
			Handler:    _BmcService_SwitchLed_Handler,
		},
		{
			MethodName: "SwitchPower",
			Handler:    _BmcService_SwitchPower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbbmc/service.proto",
}
